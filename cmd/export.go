package cmd

import (
	"fmt"
	"os"
	"sort"
	"strings"

	onepassword "github.com/hinterland-software/openv/internal/1password"
	"github.com/hinterland-software/openv/internal/logging"
	"github.com/hinterland-software/openv/internal/version"
	"github.com/spf13/cobra"
)

// exportCmd represents the export command
var exportCmd = &cobra.Command{
	Use:   "export [flags]",
	Short: "Export environment variables from 1Password to a .env file",
	Long: `Export environment variables from 1Password to a .env file.
The variables are fetched based on the URL and environment.

The URL should be the repository or project URL (e.g., github.com/org/repo).
Environment specifies the deployment environment (e.g., production, staging).

Example:
  openv export --url github.com/org/repo --env staging --file .env.staging
  openv export --url github.com/org/repo --env production -f .env`,
	RunE: func(cmd *cobra.Command, args []string) error {
		setToken(cmd)

		url, err := cmd.Flags().GetString("url")
		if err != nil {
			return fmt.Errorf("‚ùå failed to get url flag: %w", err)
		}
		env, err := cmd.Flags().GetString("env")
		if err != nil {
			return fmt.Errorf("‚ùå failed to get env flag: %w", err)
		}
		file, _ := cmd.Flags().GetString("file")
		vaultTitle, _ := cmd.Flags().GetString("vault")

		logging.Logger.Info("starting export",
			"url", url,
			"env", env,
			"file", file,
			"vault", vaultTitle)

		if vaultTitle == "" {
			vaultTitle = onepassword.DefaultVault
			logging.Logger.Debug("using default vault", "vault", vaultTitle)
		}

		logging.Logger.Debug("connecting to 1Password")
		service, err := onepassword.NewService(cmd.Context(), opServiceAuthToken)
		if err != nil {
			logging.Logger.Error("failed to create 1Password service", "error", err)
			return fmt.Errorf("‚ùå failed to create 1Password service: %w", err)
		}

		logging.Logger.Debug("looking up vault", "vault", vaultTitle)
		vault, err := service.GetVault(vaultTitle)
		if err != nil {
			logging.Logger.Error("failed to get vault", "error", err)
			return fmt.Errorf("‚ùå failed to get vault: %w", err)
		}

		fmt.Printf("üîç Finding environment variables for %s (%s)\n", url, env)
		result, err := service.GetEnvironment(onepassword.GetEnvironmentOptions{
			URL:     onepassword.GetBaseName(url),
			Env:     env,
			VaultID: vault.ID,
		})
		if err != nil {
			return fmt.Errorf("‚ùå failed to get environment variables: %w", err)
		}

		// Sort keys for consistent output
		var keys []string
		for k := range result.Variables {
			keys = append(keys, k)
		}
		sort.Strings(keys)

		// Create .env file content
		var content strings.Builder
		content.WriteString(fmt.Sprintf("# Environment variables for %s (%s)\n", url, env))
		content.WriteString(fmt.Sprintf("# Generated by openv %s\n", version.Info()))
		content.WriteString(fmt.Sprintf("# Source: https://start.1password.com/open/i?a=<account_uuid>&h=<host>&v=%s&i=%s\n\n",
			vault.ID,
			result.ItemID))
		for _, key := range keys {
			value := result.Variables[key]
			// Check if value needs quotes
			if strings.Contains(value, " ") || strings.Contains(value, "#") {
				value = fmt.Sprintf(`"%s"`, value)
			}
			content.WriteString(fmt.Sprintf("%s=%s\n", key, value))
		}

		fmt.Printf("üìù Writing %d environment variables to %s\n", len(result.Variables), file)
		if err := os.WriteFile(file, []byte(content.String()), 0600); err != nil {
			return fmt.Errorf("‚ùå failed to write environment file: %w", err)
		}

		fmt.Printf("‚úÖ Successfully exported environment variables to %s\n", file)
		return nil
	},
}

func init() {
	rootCmd.AddCommand(exportCmd)

	exportCmd.Flags().String("url", "", "Service URL")
	exportCmd.Flags().String("env", "", "Environment (e.g., production, staging)")
	exportCmd.Flags().StringP("file", "f", ".env", "Path to the output environment file")
	exportCmd.Flags().String("vault", onepassword.DefaultVault, "1Password vault to use")

	cobra.CheckErr(exportCmd.MarkFlagRequired("url"))
	cobra.CheckErr(exportCmd.MarkFlagRequired("env"))
}
